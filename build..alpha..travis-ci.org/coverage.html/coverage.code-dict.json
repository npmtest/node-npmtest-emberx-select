{"/home/travis/build/npmtest/node-npmtest-emberx-select/test.js":"/* istanbul instrument in package npmtest_emberx_select */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-emberx-select/lib.npmtest_emberx_select.js":"/* istanbul instrument in package npmtest_emberx_select */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_emberx_select = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_emberx_select = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-emberx-select/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-emberx-select && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_emberx_select */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_emberx_select\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_emberx_select.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_emberx_select.rollup.js'] =\n            local.assetsDict['/assets.npmtest_emberx_select.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_emberx_select.__dirname + '/lib.npmtest_emberx_select.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-emberx-select/node_modules/emberx-select/index.js":"/* jshint node: true */\n'use strict';\n\nmodule.exports = {\n  name: 'emberx-select',\n\n  hasContextualComponents: function () {\n    var VersionChecker = require('ember-cli-version-checker');\n\n    var checker = new VersionChecker(this);\n    var dep = checker.for('ember-source', 'npm');\n\n    if (!dep.version) {\n      dep = checker.for('ember', 'bower');\n    }\n\n    var isBetaOrCanary = ['beta', 'canary'].filter(function(version) {\n      return dep.version.indexOf(version) >= 0;\n    });\n\n    return !!(dep.satisfies('>= 2.3.0 < 3.0.0') || isBetaOrCanary.length > 0);\n  },\n\n  treeForAddonTemplates: function treeForAddonTemplates(tree) {\n    var path = require('path');\n    var baseTemplatesPath = path.join(this.root, 'addon/templates');\n\n    if (this.hasContextualComponents()) {\n      return this.treeGenerator(path.join(baseTemplatesPath, 'current'));\n    } else {\n      return this.treeGenerator(path.join(baseTemplatesPath, 'less-than-2.3'));\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-emberx-select/node_modules/emberx-select/config/deploy.js":"module.exports = function(deployTarget) {  \n  return {\n    pagefront: {\n      app: 'emberx-select',\n      key: process.env.PAGEFRONT_KEY\n    }\n  };\n};\n","/home/travis/build/npmtest/node-npmtest-emberx-select/node_modules/emberx-select/config/environment.js":"/* eslint-env node */\n'use strict';\n\nmodule.exports = function(/* environment, appConfig */) {\n  return { };\n};\n","/home/travis/build/npmtest/node-npmtest-emberx-select/node_modules/emberx-select/config/release.js":"/* jshint node:true */\n// var RSVP = require('rsvp');\n\n// For details on each option run `ember help release`\nmodule.exports = {\n  // local: true,\n  // remote: 'some_remote',\n  // annotation: \"Release %@\",\n  // message: \"Bumped version to %@\",\n  // manifest: [ 'package.json', 'bower.json', 'someconfig.json' ],\n  // publish: true,\n  // strategy: 'date',\n  // format: 'YYYY-MM-DD',\n  // timezone: 'America/Los_Angeles',\n  //\n  // beforeCommit: function(project, versions) {\n  //   return new RSVP.Promise(function(resolve, reject) {\n  //     // Do custom things here...\n  //   });\n  // }\n};\n","/home/travis/build/npmtest/node-npmtest-emberx-select/node_modules/emberx-select/addon/components/x-option.js":"import Ember from 'ember';\n\nconst { isArray } = Ember;\n\n/**\n * Used to wrap a native `<option>` tag and associate an object with\n * it that can be bound. It can only be used in conjuction with a\n * containing `x-select` component\n *\n * @class Ember.XOptionComponent\n * @extends Ember.Component\n */\nexport default Ember.Component.extend({\n  tagName: 'option',\n  attributeBindings: ['selected', 'name', 'disabled', 'value', 'title'],\n  classNameBindings: [':x-option'],\n\n  /**\n   * The value associated with this option. When this option is\n   * selected, the `x-select` will fire its action with this\n   * value.\n   *\n   * @property value\n   * @type Object\n   * @default null\n   */\n  value: null,\n\n  /**\n   * Property bound to the `selected` attribute of the native\n   * `<option>` element. It is aware of the containing `x-select`'s\n   * value and will mark itself if it is the same.\n   *\n   * @private\n   * @property selected\n   * @type Boolean\n   */\n  selected: Ember.computed('value', 'select.value', 'select.multiple', function() {\n    if (this.get('select.multiple') && isArray(this.get('select.value'))) {\n      let selectValue = Ember.A(this.get('select.value'));\n\n      return selectValue.includes(this.get('value'));\n    } else {\n      return this.get('value') === this.get('select.value');\n    }\n  }),\n\n  didReceiveAttrs() {\n    this._super.apply(...arguments);\n\n    let oldDisabled = this.get('_oldDisabled');\n\n    if(oldDisabled !== undefined && !oldDisabled) {\n      // Undefined means the first time\n\n      if(this.get('disabled') !== oldDisabled) {\n        this.sendAction('on-disable', this.get('value'), this.get('disabled'));\n      }\n    }\n\n    this.set('_oldDisabled', this.get('disabled'));\n  },\n\n  /**\n   * Register this x-option with the containing `x-select`\n   *\n   * @override\n   */\n  didInsertElement() {\n    this._super.apply(this, arguments);\n\n    Ember.run.scheduleOnce('afterRender', () => {\n      this.get('register')(this);\n    });\n  },\n\n  /**\n   * Unregister this x-option with its containing x-select.\n   *\n   * @override\n   */\n  willDestroyElement: function() {\n    this.get('unregister')(this);\n    this._super.apply(this, arguments);\n  }\n});\n","/home/travis/build/npmtest/node-npmtest-emberx-select/node_modules/emberx-select/addon/components/x-select.js":"import Ember from 'ember';\n\nconst {\n  isArray,\n  computed,\n} = Ember;\n\nconst isSelectedOption = (option) => option.$().is(':selected');\n\n/**\n * Wraps a native <select> element so that it can be object and\n * binding aware. It is used in conjuction with the\n * `x-option` component to construct select boxes. E.g.\n *\n *   {{#x-select value=\"bob\" action=\"selectPerson\"}}\n *     {{x-option value=\"fred\"}}Fred Flintstone{{/x-option}}\n *     {{x-option value=\"bob\"}}Bob Newhart{{/x-option}}\n *   {{/x-select}}\n *\n * the options are always up to date, so that when the object bound to\n * `value` changes, the corresponding option becomes selected.\n *\n * Whenever the select tag receives a change event, it will fire\n * `action`\n *\n * @class Ember.XSelectComponent\n * @extends Ember.Component\n */\nexport default Ember.Component.extend({\n  tagName: \"select\",\n  classNameBindings: [\":x-select\"],\n  attributeBindings: ['disabled', 'tabindex', 'multiple', 'form', 'name', 'autofocus', 'required', 'size', 'title'],\n\n  /**\n   * Bound to the `disabled` attribute on the native <select> tag.\n   *\n   * @property disabled\n   * @type Boolean\n   * @default false\n   */\n  disabled: false,\n\n  /**\n   * Bound to the `multiple` attribute on the native <select> tag.\n   *\n   * @property multiple\n   * @type Boolean\n   * @default false\n   */\n  multiple: false,\n\n  /**\n   * The collection of options for this select box. When options are\n   * rendered as a child from x-select, they will register themselves with their\n   * containing `x-select`. This is for internal book-keeping only and should\n   * not be changed from outside.\n   *\n   * @private\n   * @property options\n   */\n  options: computed(function() {\n    return Ember.A([]);\n  }),\n\n  /**\n   * Bound to the `tabindex` attribute on the native <select> tag.\n   *\n   * @property tabindex\n   * @type Integer\n   * @default 0\n   */\n  tabindex: 0,\n\n  /**\n   * Function for the `on-blur` action\n   *\n   * @property on-blur\n   * @type Function\n   */\n  \"on-blur\"() {},\n\n  /**\n   * Function for the `on-click` action\n   *\n   * @property on-click\n   * @type Function\n   */\n  \"on-click\"() {},\n\n  /**\n   * Function for the `on-change` action\n   *\n   * @property on-change\n   * @type Function\n   */\n  \"on-change\"() {},\n\n  /**\n   * Function for the `on-focus-out` action\n   *\n   * @property on-focus-out\n   * @type Function\n   */\n  \"on-focus-out\"() {},\n\n  /**\n   * Function that calls an action and sends the proper arguments.\n   *\n   * @method _handleAction\n   * @type Function\n   * @param {String} action - string name of the action to invoke\n   * @param {String|Object} value - current value of the component\n   * @param {Object} event - jQuery event from the current action\n   */\n  _handleAction(action, value, event) {\n    let actionValue = this.get(action);\n\n    if(typeof actionValue === 'string') {\n      Ember.warn(`x-select: You must use the action helper for all actions. The try: ${action}=(action \"${actionValue}\") in your template`, false, {id: 'x-select-string-action'});\n      return;\n    }\n\n    this.get(action)(value, event);\n  },\n\n  /**\n   * When the select DOM event fires on the element, trigger the\n   * component's action with the current value.\n   */\n  change(event) {\n    let nextValue = this._getValue();\n\n    this.sendAction('action', nextValue, event, this);\n    this._handleAction('on-change', nextValue, event);\n  },\n\n  /**\n   * When the click DOM event fires on the element, trigger the\n   * component's action with the component, x-select value, and the jQuery event.\n   */\n  click(event) {\n    this._handleAction('on-click', this._getValue(), event);\n  },\n\n  /**\n   * When the blur DOM event fires on the element, trigger the\n   * component's action with the component, x-select value, and the jQuery event.\n   */\n  blur(event) {\n    this._handleAction('on-blur', this._getValue(), event);\n  },\n\n  /**\n   * When the focusOut DOM event fires on the element, trigger the\n   * component's action with the component, x-select value, and the jQuery event.\n   */\n  focusOut(event) {\n    this._handleAction('on-focus-out', this._getValue(), event);\n  },\n\n  /**\n   * Reads the current selection from this select's options.\n   *\n   * If this is a multi-select, then the value will be an\n   * array. Otherwise, it will be a single value which could be null.\n   *\n   * @private\n   * @return {Array|Object} the current selection\n   */\n  _getValue() {\n    return this.get('multiple') ? this._findMultipleValues() : this._findSingleValue();\n  },\n\n  /**\n   * Finds all selected values from all `x-option`\n   * children. Used when this.get('multiple') === true\n   *\n   * @private\n   * @return {Array} all the values from selected x-options\n   */\n  _findMultipleValues() {\n    return this.get('options').filter(isSelectedOption).map(option => option.get('value'));\n  },\n\n  /**\n   * Returns the value of the first selected `x-option`.\n   * Used when `this.get('multiple') !== true`\n   *\n   * @private\n   * @return {Object} the value of the first select `x-option`, or null\n   */\n  _findSingleValue() {\n    let selectedValue = this.get('options').find(isSelectedOption);\n    return selectedValue ? selectedValue.get('value') : null;\n  },\n\n  /**\n   * If no explicit value is set, apply default values based on selected=true in\n   * the template.\n   *\n   * @private\n   */\n  _setDefaultValues: function() {\n    Ember.run.once(this, this.__setDefaultValues);\n  },\n\n  __setDefaultValues: function() {\n    let canSet = !this.isDestroying && !this.isDestroyed;\n    if (canSet && this.get('value') == null) {\n      this.sendAction('action', this._getValue());\n    }\n  },\n\n  /**\n   * @override\n   */\n  didInsertElement() {\n    this._super.apply(this, arguments);\n\n    this.$().on('blur', (event) => {\n      this.blur(event);\n    });\n\n    // FIXME this is an unfortunate workaround for an Edge bug for selects with required:\n    // https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/8794503/\n    if (/edge\\//i.test(window.navigator.userAgent)) {\n      let value = this.$().val();\n      this.$().val(`${value}-fake-edge-😳`);\n      this.$().val(value);\n    }\n  },\n\n  /**\n   * @override\n   */\n  willDestroyElement: function() {\n    this.$().off('blur');\n    this._super.apply(this, arguments);\n  },\n\n  /**\n   * If this is a multi-select, and the value is not an array, that\n   * probably indicates a misconfiguration somewhere, so we error out.\n   *\n   * @private\n   */\n  ensureProperType: Ember.on('init', Ember.observer('value', function() {\n    let value = this.get('value');\n\n    if (value != null && this.get('multiple') && !isArray(value)) {\n      throw new Error(`x-select multiple=true was set, but value ${value} is not enumerable.`);\n    }\n  })),\n\n  actions: {\n\n    /**\n     * Registers a new option that is contained within x-select.\n     *\n     * This is called whenever an x-option component is inserted into the DOM.\n     *\n     * @param {<x-option>} option - x-option component.\n     * @private\n     */\n    registerOption(option) {\n      this.get('options').push(option);\n      this._setDefaultValues();\n    },\n\n    /**\n     * Removes a the passed option that is contained within x-select.\n     *\n     * This is called whenever an x-option component is begining teardown.\n     *\n     * @param {<x-option>} option - x-option component.\n     * @private\n     */\n    unregisterOption(option) {\n      this.get('options').removeObject(option);\n      this._setDefaultValues();\n    }\n  }\n});\n"}